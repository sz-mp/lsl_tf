# test timeflux
graphs:

  - id: Broker
    nodes:
    - id: proxy # linking publisher and subscriber
      module: timeflux.nodes.zmq
      class: Broker

  - id: Publisher
    nodes:
    - id: inlet # LSL data inlet
      module: timeflux.nodes.lsl
      class: Receive
      params:
        prop: type
        value: EEG
        unit: s
        sync: local
        channels: [1,2,3,4,5,6,7,8] # fake channels from LSL
    - id: add # random sig proc
      module: timeflux_example.nodes.arithmetic
      class: Add
      params:
        value: 1
    - id: pub_before # before proc
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: before
    - id: pub_after # after proc
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: after
    edges:
    - source: inlet
      target: add
    - source: inlet
      target: pub_before
    - source: add
      target: pub_after

  - id: Subscriber
    nodes:
    - id: sub # connect to monitor for real-time viz
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ before, after ]
    - id: monitor # monitor ui
      module: timeflux_ui.nodes.ui
      class: UI
    edges:
      - source: sub:before
        target: monitor:before
      - source: sub:after
        target: monitor:after

  - id: recorder # save data
    nodes:
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: ['after'] # saving proc data
    - id: save
      module: timeflux.nodes.hdf5
      class: Save
      params:
        path: ./data # specify save path
        min_itemsize: null
    edges:
      - source: sub:after
        target: save:foo_bar
    rate: 1 # saving every 1s